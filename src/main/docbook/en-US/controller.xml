<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

  
      
<chapter>
    <title>The Controller Layer</title>
    <para>
        <emphasis>Conventions Controllers</emphasis> are represented by CDI beans and the framework count
        with four flavors of them, we will see each one in detail.
    </para>
    <section id="beantypes">
        <title>
            Bean Types
        </title>
        <section>
            <title>
                BaseMBean
            </title>
            <para>
                As its name says is the base bean for other conventions controllers and it has the following characteristics:
                
                <itemizedlist>
                    <listitem>manages an entity (
                        <xref linkend="beanEntity"/>)
                    </listitem>
                    <listitem>has an extensible state (
                        <xref linkend="beanState"/>)
                    </listitem>
                    <listitem>access to a service (
                        <xref linkend="serviceLayer"/>)
                    </listitem>
                    <listitem>provides methods to conventions UI components (
                        <xref linkend="view-layer"/>) 
                    </listitem>
                    <listitem>access to the resourceBundle (
                        <xref linkend="i18n"/>)
                    </listitem>
                    <listitem>access to the paginator component (
                        <xref linkend="paginator"/>)
                    </listitem>
                </itemizedlist>    
            </para>
            <para>
                Here is a simple BaseMBean:
                
            </para>
            <programlisting role="JAVA"><![CDATA[  
            import org.conventionsframework.bean.BaseMBean;
            @ViewAccessScoped
            @Named("simpleMBean")    
            public class SimpleMBean extends BaseMBean<Person> {
                
                @Inject 
                public void setService(PersonService personService) {
                    super.setBaseService(personService);
                }
                 /**
                * called by saveButton
                */
               @Override
               public void store() {
                   super.store();
               }

               /**
                * called after 'addButton' is clicked  
                * to decide the navigation
                */
               @Override
               public String afterPrepareInsert() {
                   return null;
               }

               /**
                * called after 'editButton' is clicked  
                * to decide the navigation
                */
               @Override
               public String afterPrepareUpdate() {
                   return null;
               }

               /**
                * called when 'filterButton' is clicked
                */
               @Override
               public void find() {
               }
                
                }]]>
            </programlisting>
            <important id="beanService">
                To perform datatabase operations you need to set the bean service
                so the code below is required:
                <programlisting role="JAVA"><![CDATA[
                @Inject 
                public void setService(PersonService personService) {
                    super.setBaseService(personService);
                }
                    ]]>
                </programlisting>
                <para>Or you can use @Service annotation:</para>
                <programlisting role="JAVA"><![CDATA[  
            import org.conventionsframework.bean.BaseMBean;
            import org.conventionsframework.qualifier.Service;
            @ViewAccessScoped
            @Named("simpleMBean")    
            @Service(name="name a named service")      
            public class SimpleMBean extends BaseMBean<Person> {
                    
                     }]]>
                </programlisting>
                     
            </important>
            <tip>
                <programlisting role="JAVA"><![CDATA[  
               @Override
               public void store() {
                   super.store();
               }]]>
                </programlisting>
                <para>calls the service store method which will perform a hibernate saveOrUpdate
                    on top of the bean entity(
                    <xref linkend="beanEntity"/>). You may override it in your service store method and put some business logic before
                    saving the entity to the datatabase, we will see how to do that on service chapter(
                    <xref linkend="serviceLayer"/>).
                </para>
            </tip>       
             
            <para>
                For more examples of base conventions beans look at 
                <ulink url="http://conventions-rpestano.rhcloud.com/conventions/pages/person/personHome.faces"> online showcase examples</ulink>
            </para>
          
        </section>
        
        <section>
            <title>
                StateMBean
            </title>
            <para>
                TODO Describe StateMBean
            </para>
        </section>
        <section>
            <title>
                ModalMBean
            </title>
            <para>
                TODO Describe ModalMBean
            </para>
        </section>
        <section>
            <title>
                ConversationalMBean
            </title>
            <para>
                TODO Describe ConversationalMBean
            </para>
        </section>
    </section>
    <section id="beanEntity">
        <title>
            The Bean Entity
        </title>
        <para>
            A managed bean usually performs operations on top of a JPA entity,
            this entity is represented by the entity attribute in BaseMBean
        </para>     
        <programlisting role="JAVA"><![CDATA[  
            import org.conventionsframework.bean.BaseMBean;
            import javax.inject.Named;
            import org.apache.myfaces.extensions.cdi.core.api.scope.conversation.ViewAccessScoped;
            @ViewAccessScoped
            public class SimpleMBean extends BaseMBean<EntityClass> {
                 public void someMethod(){
                     EntityClass someVar = getEntity();
                     setEntity(new EntityClass());
                }
                }]]>
        </programlisting>
        <tip>
            some Conventions composite components will act on top of the entity atribute, 
            like editButton, removeButton and so on...
        </tip>
        <para>
            the Entity type can be provided by the following ways:
            <itemizedlist>
                <listitem>@PersistentClass annotation</listitem>
            </itemizedlist>
        </para>
        <programlisting role="JAVA"><![CDATA[  
            @RequestScoped
            @PersistentClass(Person.class)
            public class SimpleMBean extends BaseMBean<EntityClass> {
                 public void someMethod(){
                     Person someVar = getEntity();
                     setEntity(new Person());
                }
                }]]>
        </programlisting>
        <para>
            <itemizedlist>
                <listitem>override the create method</listitem>
            </itemizedlist>
        </para>   
        <programlisting role="JAVA"><![CDATA[  
            @RequestScoped
            public class SimpleMBean extends BaseMBean<Person> {
            
                @Override
                public Person create(){
                  return new Person();
                 }
                 public void someMethod(){
                     Person someVar = getEntity();
                     setEntity(new Person());
                }
            
                }]]>
        </programlisting>
        <para>
            <note>
                if you dont provide a way to resolve the entity the framework will try to resolve 
                it via reflections but avoid that because in some situations your managed bean will be a CDI proxy
                (eg. when @SecurityMethod annotation is present) and the reflection will not work.
            </note> 
        </para> 
           
    </section>  
    <section id="beanState">
        <title>
            The Bean State
        </title>
        <para>
            A beanState is represented by the 
            <code>State</code> interface which has only a method 
            <code>String getStateName()</code>
            that describes the current state of the managedBean, the baseMBean has a built in CrudState which represents
            states for cruding so when you are editing an entity the bean is in updateState, this state information 
            can be useful in various situations such as hiding some parts of the page 
            or executing some business logig only in determinated state for example.
        </para>
        <tip>
            BaseMBean changes the state automaticly depending on the UI component is used,
            for example when you click editButton the beanState in set to CrudState.UPDATE
        </tip>
        <para>
            Below is a example of CrudState to hide blocks of page depending on bean state: 
        </para>
        <programlisting role="XML"><![CDATA[
                     <p:outputPanel rendered="#{empty personMBean.beanState or personMBean.findState}">
                        <ui:include src="listUser.xhtml"/>
                    </p:outputPanel>  
                    <p:outputPanel rendered="#{personMBean.insertState or personMBean.updateState}">
                        <ui:include src="addUser.xhtml"/>
                    </p:outputPanel> 
                    <p:outputPanel rendered="#{personMBean.friendState}">
                        <ui:include src="addFriend.xhtml"/>
                    </p:outputPanel> 
                     
                     ]]>
        </programlisting>
        <para>
            Below is the use of bean state in the controller: 
        </para>     
        <programlisting role="JAVA"><![CDATA[
                      public class MyBean extends BaseMBean<Entity,Long>{
                    
                        public void anAction(){
                            if(isFindState()){
                                //if bean is in findState do some stuff
                            }
                    
                            setBeanState(CrudState.UPDATE);//change the bean state
                        }
                     }
                     ]]>
        </programlisting>
                     
        <para>the code below shows how to create your own States </para> 
                
        <programlisting role="JAVA"><![CDATA[
                        public enum SecurityState implements State{
                        ADMIN("admin"),GUEST("guest");

                        private final String stateName;

                        SecurityState (String stateName){
                            this.stateName = stateName;
                        }

                        @Override
                        public String getStateName() {
                            return this.stateName;
                        }
                     ]]>
        </programlisting>
                      
    </section>
</chapter>

    
 
