<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<section id="entimanagerprovider">
    <title>
        Entity Manager Provider
    </title>
    <para>
        The EntityManagerProvider is an important component in the framework architecture, it is the 'guy'
        who provide instances of the so called EntityManager. 
    </para>
    <para>
        Conventions comes with three built in entityManagerProviders that are used by the 
        built in 
        <emphasis>Services</emphasis> but creating your own provider is very easy 
        and will be demostrated in the next sections.
    </para>
    <section>
        <title>
            The built in providers
        </title>
        <variablelist>
            <varlistentry id="statelessprovider">
                <term>
                    <code>StatelessEntityManagerProvider:</code>
                </term>
                <listitem> 
                    <para > is a 
                        <emphasis>Stateless</emphasis> EJB that provides the entity manager via 
                        a 
                        <emphasis>Transaction PersistenContext</emphasis>, it is used by the StatelessHibernateService.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry id="statefulprovider">
                <term>
                    <code>StatefulEntityManagerProvider:</code>
                </term>
                <listitem> 
                    <para > is a 
                        <emphasis>Stateful</emphasis> EJB that provides the entity manager via 
                        an 
                        <emphasis>Extended PersistenContext</emphasis>, it is used by the StatefulHibernateService.
                    </para>
                    <tip>
                        You rarely will touch in a built in entityManagerProvider code but its important to know what kind 
                        of PersistenceContext your service is using and how your entities will be managed so you can solve problems like 
                        'lazyInitialization' accordingly.
                    </tip>
                </listitem>
            </varlistentry>
            <varlistentry id="customprovider">
                <term>
                    <code>CustomEntityManagerProvider:</code>
                </term>
                <listitem> 
                    <para> is a is a dummy provider
                        that you MUST extend to get it working properly, see  
                        <xref linkend="ext-provider"/>.
                        It is used by CustomHibernateService.
                    </para>
                    <tip>
                        CustomEntityManagerProvider and CustomHibernateService were designed to work without EJB 
                        and are used in Tomcat sample applications.
                    </tip>
                </listitem>
            </varlistentry>
        </variablelist> 
          
    </section>
    <section id="ext-provider">
        <title>
            Extending an EntityManagerProvider
        </title>
        <para>
            The built in providers will work as long you have only one
            persistence unit if you have multiple datatasources in your application
            you will need to extend an existing provider to specify which datasource the provider will use, to do that you will need:
            <itemizedlist>
                <listitem>extend an existing provider</listitem>
                <listitem>use the CDI 
                    <code>@Specializes</code> qualifier
                </listitem>
                <listitem>use
                    <code>@ConventionsEntityManager</code>  qualifier with the right type
                    <para> so if you are extending the StatelessEntityManagerProvider then type=Type.STATELESS</para>
                </listitem>
                <listitem>implement the EntityManagerProvider interface</listitem>
                <listitem>override the 
                    <code>getEntityManager()</code> method.
                </listitem>
            </itemizedlist>
            here is an example:
        </para>
        <programlisting role="JAVA"><![CDATA[  package org.conventionsframework.showcase.provider;

import org.conventionsframework.showcase.controller.ComboMBean;
import javax.enterprise.context.RequestScoped;
import javax.enterprise.inject.Specializes;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.conventionsframework.entitymanager.CustomEntityManagerProvider;
import org.conventionsframework.entitymanager.EntityManagerProvider;
import org.conventionsframework.qualifier.ConventionsEntityManager;
import org.conventionsframework.qualifier.Type;

/**
 * entityManager provider for CustomHibernateService
 * @see ComboMBean#initList(org.conventionsframework.service.BaseService) 
 * @author rmpestano
 */
@Specializes
@RequestScoped
@ConventionsEntityManager(type=Type.CUSTOM)
public class ShowcaseEntityManagerProvider extends CustomEntityManagerProvider implements EntityManagerProvider {

    @PersistenceContext(unitName="anotherUnit")
    private EntityManager entityManager;//can be provided by an EntityManagerFactory

    @Override
    public EntityManager getEntityManager() {
        return entityManager;
    }

     
}]]>
        </programlisting>
        <note>
            <para>
                the @ConventionsEntityManager qualifier is needed if you are using a built in service
                so for exemple when you say that your provider is 
                <code>type=Type.CUSTOM</code> 
                you are specifying the entityManagerProvider for CustomHibernateService, but
                you can extend a built in provider and use it in your own service if do that 
                you wont need the 
                <code>@ConventionsEntityManager</code> but an easy way to do that
                is creating your own EntityManagerProvider.
            </para>
        </note>
        <important>
            <para>
                When you have multiples services that extend the built in Services 
                keep in mind that your services are sharing the same PersistenceContext(when type=EXTENDED)
                so if you want a PersistenceContext per Service you must create
                an EntityManager provider for each service.
            </para>
        </important>
        
    </section>
    <section>
        <title>
            Creating your own EntityManagerProvider
        </title>
        <para>
            To create your provider you'll need:
            
            <itemizedlist>
                <listitem>implement the EntityManagerProvider interface</listitem>
                <listitem>implement the 
                    <code>getEntityManager()</code> method.
                </listitem>
                <listitem>provide the 
                    <code>@Named</code> annotation to differentiate your provider
                    from existing ones. 
                </listitem>
                <listitem>inject it in a service you create like in the example below </listitem>
            </itemizedlist>
            here is an example:
        </para>
        <programlisting role="JAVA"><![CDATA[ package org.conventionsframework.showcase.provider;

import javax.ejb.Stateless;
import javax.enterprise.context.Dependent;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.conventionsframework.entitymanager.EntityManagerProvider;

/**
 *
 * @author Rafaem M. Pestano - Sep 12, 2012 1:05:46 PM
 */
@Stateless
@Dependent
@Named("myProvider")
public class MyEntityManagerProvider implements EntityManagerProvider{

    @PersistenceContext
    private EntityManager entityManager;
    
    
    @Override
    public EntityManager getEntityManager() {
        return entityManager;
    }

    @Override
    public void setEntityManager(EntityManager entityManager) {
        this.entityManager = entityManager;
    }

}]]>
        </programlisting>
        <tip>
            <para>you also can change the EntityManagerProvider of a built in Service, here is how to:</para>
            <programlisting role="JAVA"><![CDATA[
@Named("personService")
public class PersonServiceImpl extends StatefulHibernateService<Person, Long> implements PersonService {
                 //note that StatefulHibernateService uses StatefulEntityManagerProvider
                 @Inject @Named("myProvider")
                 private EntityManagerProvider entityManagerProvider;//example of created EntityManagerProvider instead of using built in
                 
                 @PostContruct
                 void changeProvider(){
                   super.setEntityManagerProvider(entityManagerProvider);
                 }
                 
                 //OR override getter
               /* @Override
                public EntityManagerProvider getEntityManagerProvider() {
                    return this.entityManagerProvider;
                 } */
               }
                 ]]>
            </programlisting>
        </tip>
    </section>
    
    <section>
        <title>setting entity manager "by hand"</title>
        <para> If you dont want to create or extend an entityManagerProvider but still want
            one PersistenceContext per service or have multiple persistence units you can set the entityManager by hand in each 
            service, see the code  below:
        </para>
        <programlisting role="JAVA"><![CDATA[
@Named("personService")
@Stateful//needed if you want to have a persistenceContext           
public class PersonServiceImpl extends StatefulHibernateService<Person, Long> implements PersonService {
                 //note that StatefulHibernateService uses StatefulEntityManagerProvider
                 @PersistenceContext(unitName="myUnit")
                 private EntityManager entityManager;
           
                 @PostContruct
                 void changeEntityManager(){
                   super.getEntityManagerProvider().setEntityManager(entityManager);
                 }
               }
                 ]]>
        </programlisting>
    </section>                 
</section>